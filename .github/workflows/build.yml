name: SonarQube

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      - name: Begin SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin \
            /k:"Leandro01-oliver_FinanceSportApi" \
            /o:"leandro01-oliver" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.verbose=true

      - name: Build project
        run: dotnet build

      - name: End SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner end \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  revert-or-delete-branch:
    name: Revert or Delete Branch on Sonar Failure
    runs-on: ubuntu-latest
    needs: sonar-analysis
    if: failure()  # Executa apenas se sonar-analysis falhar
    env:
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git for PAT operations
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
      
      - name: Delete branch if not protected
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch atual: $BRANCH_NAME"
          if [[ "$BRANCH_NAME" != "develop" && "$BRANCH_NAME" != "homologacao" && "$BRANCH_NAME" != "master" && "$BRANCH_NAME" != hotfix* ]]; then
            echo "Excluindo branch remota $BRANCH_NAME..."
            git push origin --delete "$BRANCH_NAME"
          else
            echo "Branch protegida ($BRANCH_NAME), n√£o ser√° exclu√≠da."
          fi
      
      - name: Send rejection email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Branch '${{ github.ref_name }}' rejeitada ap√≥s falha no SonarCloud"
          to: dev@email.com
          from: "CI Bot <ci@email.com>"
          body: |
            Ol√°,

            Sua branch '${{ github.ref_name }}' foi exclu√≠da automaticamente porque falhou na an√°lise do SonarCloud.

            Veja o relat√≥rio do SonarCloud para detalhes: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi

            Motivo: Falha na an√°lise de qualidade de c√≥digo.

            Atenciosamente,
            CI/CD Pipeline

  open-pull-request:
    name: Open Pull Request to develop
    runs-on: ubuntu-latest
    needs: sonar-analysis
    if: success() && github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/homologacao'  # S√≥ executa se sonar-analysis for bem-sucedido e n√£o for uma branch protegida
    env:
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git for PAT operations
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
      
      - name: Verificar se PR j√° existe
        id: check-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            try {
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
                state: 'open',
              });
              
              if (pulls.length > 0) {
                core.setOutput('pr-exists', 'true');
                core.setOutput('pr-number', pulls[0].number);
                core.info(`PR #${pulls[0].number} j√° existe`);
              } else {
                core.setOutput('pr-exists', 'false');
                core.info('Nenhum PR encontrado, criando novo...');
              }
            } catch (error) {
              core.warning(`Erro ao verificar PRs existentes: ${error.message}`);
              core.setOutput('pr-exists', 'false');
            }
      
      - name: Criar Pull Request (se n√£o existir)
        if: steps.check-pr.outputs.pr-exists == 'false'
        uses: devops-infra/action-pull-request@v0.5.0
        with:
          github_token: ${{ secrets.GH_PAT }}
          source_branch: ${{ github.ref_name }}
          target_branch: develop
          title: "Merge autom√°tico: ${{ github.ref_name }} ‚Üí develop"
          body: |
            Merge autom√°tico ap√≥s an√°lise bem-sucedida no SonarCloud.
            
            **An√°lise de Qualidade:**
            - ‚úÖ SonarCloud: Aprovado
            - üìä Relat√≥rio: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi
            
            **Branch:** ${{ github.ref_name }}
            **Autor:** ${{ github.actor }}
            **Data:** ${{ github.event.head_commit.timestamp }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      
      - name: Send success email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Pull request processado para '${{ github.ref_name }}' ap√≥s sucesso no SonarCloud"
          to: dev@email.com
          from: "CI Bot <ci@email.com>"
          body: |
            Ol√°,

            O pull request para a branch '${{ github.ref_name }}' foi processado automaticamente ap√≥s sucesso na an√°lise do SonarCloud.

            **Status:** ${{ steps.check-pr.outputs.pr-exists == 'true' && 'PR existente processado' || 'Novo PR criado' }}
            **Branch:** ${{ github.ref_name }}
            **Autor:** ${{ github.actor }}

            Veja o relat√≥rio do SonarCloud para detalhes: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi

            Atenciosamente,
            CI/CD Pipeline

  auto-merge:
    name: Auto Merge PR to develop
    runs-on: ubuntu-latest
    needs: [sonar-analysis, open-pull-request]
    if: success() && github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/homologacao'
    env:
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git for PAT operations
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
      
      - name: Aguardar e tentar merge autom√°tico
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            try {
              // Aguardar um pouco para garantir que o PR foi criado/atualizado
              await new Promise(resolve => setTimeout(resolve, 10000));
              
              // Buscar o PR para a branch atual
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
                state: 'open',
              });
              
              if (pulls.length === 0) {
                core.warning('Nenhum PR encontrado para merge autom√°tico');
                return;
              }
              
              const pr = pulls[0];
              core.info(`Tentando fazer merge do PR #${pr.number}...`);
              
              // Aguardar mais um pouco para o GitHub calcular o status de merge
              await new Promise(resolve => setTimeout(resolve, 5000));
              
              // Buscar o PR atualizado para verificar o status
              const { data: updatedPr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              });
              
              core.info(`Status do PR #${updatedPr.number}: mergeable=${updatedPr.mergeable}, state=${updatedPr.state}, draft=${updatedPr.draft}`);
              
              if (updatedPr.mergeable === true && updatedPr.state === 'open' && !updatedPr.draft) {
                // Verificar se h√° checks pendentes
                const { data: checks } = await github.rest.checks.listForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: updatedPr.head.sha,
                });
                
                const pendingChecks = checks.check_runs.filter(check => 
                  check.status === 'in_progress' || check.status === 'queued'
                );
                
                if (pendingChecks.length > 0) {
                  core.warning(`PR #${updatedPr.number} tem checks pendentes: ${pendingChecks.map(c => c.name).join(', ')}`);
                  return;
                }
                
                // Fazer o merge
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: updatedPr.number,
                  merge_method: 'merge',
                  commit_title: `Merge autom√°tico: ${context.ref.replace('refs/heads/', '')} ‚Üí develop`,
                  commit_message: `Merge autom√°tico ap√≥s an√°lise bem-sucedida no SonarCloud\n\n- Branch: ${context.ref.replace('refs/heads/', '')}\n- Autor: ${context.actor}\n- An√°lise: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi`
                });
                core.info(`PR #${updatedPr.number} mergeado com sucesso!`);
              } else if (updatedPr.mergeable === false) {
                core.warning(`PR #${updatedPr.number} n√£o pode ser mergeado (conflitos ou checks pendentes)`);
              } else if (updatedPr.draft) {
                core.warning(`PR #${updatedPr.number} √© um draft e n√£o pode ser mergeado automaticamente`);
              } else if (updatedPr.state !== 'open') {
                core.warning(`PR #${updatedPr.number} n√£o est√° aberto (state: ${updatedPr.state})`);
              } else {
                core.warning(`Status de merge do PR #${updatedPr.number} √© desconhecido (mergeable: ${updatedPr.mergeable})`);
              }
                         } catch (error) {
               core.error(`Erro ao fazer merge do PR: ${error.message}`);
               // N√£o falhar o workflow por erro de merge
             }
      
      - name: Send merge success email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Merge autom√°tico realizado para '${{ github.ref_name }}' ‚Üí develop"
          to: dev@email.com
          from: "CI Bot <ci@email.com>"
          body: |
            Ol√°,

            O merge autom√°tico para a branch '${{ github.ref_name }}' foi processado.

            **Branch:** ${{ github.ref_name }}
            **Autor:** ${{ github.actor }}
            **Target:** develop

            Veja o relat√≥rio do SonarCloud para detalhes: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi

            Atenciosamente,
            CI/CD Pipeline
