name: SonarQube

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      - name: Begin SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin \
            /k:"Leandro01-oliver_FinanceSportApi" \
            /o:"leandro01-oliver" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.verbose=true

      - name: Build project
        run: dotnet build

      - name: End SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner end \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  revert-or-delete-branch:
    name: Revert or Delete Branch on Sonar Failure
    runs-on: ubuntu-latest
    needs: sonar-analysis
    if: failure()  # Executa apenas se sonar-analysis falhar
    env:
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git for PAT operations
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
      
      - name: Delete branch if not protected
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch atual: $BRANCH_NAME"
          if [[ "$BRANCH_NAME" != "develop" && "$BRANCH_NAME" != "homologacao" && "$BRANCH_NAME" != "master" && "$BRANCH_NAME" != hotfix* ]]; then
            echo "Excluindo branch remota $BRANCH_NAME..."
            git push origin --delete "$BRANCH_NAME"
          else
            echo "Branch protegida ($BRANCH_NAME), n√£o ser√° exclu√≠da."
          fi
      
      - name: Send rejection email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Branch '${{ github.ref_name }}' rejeitada ap√≥s falha no SonarCloud"
          to: dev@email.com
          from: "CI Bot <ci@email.com>"
          body: |
            Ol√°,

            Sua branch '${{ github.ref_name }}' foi exclu√≠da automaticamente porque falhou na an√°lise do SonarCloud.

            Veja o relat√≥rio do SonarCloud para detalhes: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi

            Motivo: Falha na an√°lise de qualidade de c√≥digo.

            Atenciosamente,
            CI/CD Pipeline

  open-pull-request:
    name: Open Pull Request to develop
    runs-on: ubuntu-latest
    needs: sonar-analysis
    if: success() && github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/homologacao'  # S√≥ executa se sonar-analysis for bem-sucedido e n√£o for uma branch protegida
    env:
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git for PAT operations
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
      
      - name: Verificar se PR j√° existe
        id: check-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            try {
              console.log('Verificando se j√° existe PR para esta branch...');
              
              // Verificar se o reposit√≥rio existe
              console.log(`Verificando reposit√≥rio: ${context.repo.owner}/${context.repo.repo}`);
              try {
                await github.rest.repos.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                });
                console.log('Reposit√≥rio encontrado!');
              } catch (error) {
                console.error(`Reposit√≥rio ${context.repo.owner}/${context.repo.repo} n√£o encontrado.`);
                throw error;
              }
              
              const branch = context.ref.replace('refs/heads/', '');
              console.log(`Buscando PRs da branch: ${branch}`);
              
              // Listar PRs da branch especificada
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branch}`,
                state: 'open',
              });
              
              console.log(`\nPRs da branch ${branch} no reposit√≥rio ${context.repo.owner}/${context.repo.repo}:`);
              
              if (pulls.length > 0) {
                console.log(`\nEncontrados ${pulls.length} PR(s) abertos:`);
                pulls.forEach((pr, index) => {
                  console.log(`${index + 1}. PR #${pr.number}: ${pr.title}`);
                  console.log(`   URL: ${pr.html_url}`);
                  console.log(`   Status: ${pr.state}`);
                  console.log(`   Criado por: ${pr.user.login}`);
                  console.log('---');
                });
                
                // Usar o primeiro PR encontrado
                const pr = pulls[0];
                core.setOutput('pr-exists', 'true');
                core.setOutput('pr-number', pr.number);
                core.info(`PR #${pr.number} j√° existe e ser√° usado`);
              } else {
                console.log('Nenhum PR aberto encontrado para esta branch.');
                core.setOutput('pr-exists', 'false');
                core.info('Nenhum PR encontrado, criando novo...');
              }
            } catch (error) {
              console.error('Erro ao listar PRs:', error.message);
              if (error.status === 401) {
                console.error('Erro de autentica√ß√£o. Verifique se o token est√° configurado corretamente.');
              } else if (error.status === 404) {
                console.error('Reposit√≥rio n√£o encontrado. Verifique se o owner e repo est√£o corretos.');
              } else if (error.status === 403) {
                console.error('Acesso negado. Este reposit√≥rio pode ser privado. Configure um token do GitHub.');
              }
              core.warning(`Erro ao verificar PRs existentes: ${error.message}`);
              core.setOutput('pr-exists', 'false');
            }
      
      - name: Criar Pull Request (se n√£o existir)
        if: steps.check-pr.outputs.pr-exists == 'false'
        id: create-pr
        uses: devops-infra/action-pull-request@v0.5.0
        with:
          github_token: ${{ secrets.GH_PAT }}
          source_branch: ${{ github.ref_name }}
          target_branch: develop
          title: "Merge autom√°tico: ${{ github.ref_name }} ‚Üí develop"
          body: |
            Merge autom√°tico ap√≥s an√°lise bem-sucedida no SonarCloud.
            
            **An√°lise de Qualidade:**
            - ‚úÖ SonarCloud: Aprovado
            - üìä Relat√≥rio: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi
            
            **Branch:** ${{ github.ref_name }}
            **Autor:** ${{ github.actor }}
            **Data:** ${{ github.event.head_commit.timestamp }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      
      - name: Obter n√∫mero do PR criado
        if: steps.check-pr.outputs.pr-exists == 'false'
        id: get-pr-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            try {
              console.log('Aguardando cria√ß√£o do PR e obtendo n√∫mero...');
              
              // Aguardar um pouco para o PR ser criado
              await new Promise(resolve => setTimeout(resolve, 5000));
              
              const branch = context.ref.replace('refs/heads/', '');
              console.log(`Buscando PR rec√©m-criado da branch: ${branch}`);
              
              // Listar PRs da branch especificada
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branch}`,
                state: 'open',
              });
              
              console.log(`\nPRs da branch ${branch} no reposit√≥rio ${context.repo.owner}/${context.repo.repo}:`);
              
              if (pulls.length > 0) {
                console.log(`\nEncontrados ${pulls.length} PR(s) abertos:`);
                pulls.forEach((pr, index) => {
                  console.log(`${index + 1}. PR #${pr.number}: ${pr.title}`);
                  console.log(`   URL: ${pr.html_url}`);
                  console.log(`   Status: ${pr.state}`);
                  console.log(`   Criado por: ${pr.user.login}`);
                  console.log('---');
                });
                
                // Usar o primeiro PR encontrado (deve ser o rec√©m-criado)
                const pr = pulls[0];
                core.setOutput('pr-number', pr.number);
                core.info(`PR #${pr.number} criado com sucesso`);
              } else {
                console.log('Nenhum PR encontrado ap√≥s cria√ß√£o.');
                core.warning('PR n√£o encontrado ap√≥s cria√ß√£o');
              }
            } catch (error) {
              console.error('Erro ao obter n√∫mero do PR:', error.message);
              if (error.status === 401) {
                console.error('Erro de autentica√ß√£o. Verifique se o token est√° configurado corretamente.');
              } else if (error.status === 404) {
                console.error('Reposit√≥rio n√£o encontrado. Verifique se o owner e repo est√£o corretos.');
              } else if (error.status === 403) {
                console.error('Acesso negado. Este reposit√≥rio pode ser privado. Configure um token do GitHub.');
              }
              core.error(`Erro ao obter n√∫mero do PR: ${error.message}`);
            }
      
      - name: Output PR number for auto-merge
        id: output-pr-number
        if: always()
        run: |
          if [[ "${{ steps.check-pr.outputs.pr-exists }}" == "true" ]]; then
            echo "pr-number=${{ steps.check-pr.outputs.pr-number }}" >> $GITHUB_OUTPUT
            echo "PR number from existing PR: ${{ steps.check-pr.outputs.pr-number }}"
          elif [[ "${{ steps.get-pr-number.outputs.pr-number }}" != "" ]]; then
            echo "pr-number=${{ steps.get-pr-number.outputs.pr-number }}" >> $GITHUB_OUTPUT
            echo "PR number from created PR: ${{ steps.get-pr-number.outputs.pr-number }}"
          else
            echo "No PR number found"
          fi
      
      - name: Debug - Verificar outputs
        if: always()
        run: |
          echo "=== DEBUG OUTPUTS ==="
          echo "check-pr.pr-exists: ${{ steps.check-pr.outputs.pr-exists }}"
          echo "check-pr.pr-number: ${{ steps.check-pr.outputs.pr-number }}"
          echo "get-pr-number.pr-number: ${{ steps.get-pr-number.outputs.pr-number }}"
          echo "final pr-number: ${{ steps.output-pr-number.outputs.pr-number }}"
          echo "====================="
      
      - name: Send success email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Pull request processado para '${{ github.ref_name }}' ap√≥s sucesso no SonarCloud"
          to: dev@email.com
          from: "CI Bot <ci@email.com>"
          body: |
            Ol√°,

            O pull request para a branch '${{ github.ref_name }}' foi processado automaticamente ap√≥s sucesso na an√°lise do SonarCloud.

            **Status:** ${{ steps.check-pr.outputs.pr-exists == 'true' && 'PR existente processado' || 'Novo PR criado' }}
            **Branch:** ${{ github.ref_name }}
            **Autor:** ${{ github.actor }}

            Veja o relat√≥rio do SonarCloud para detalhes: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi

            Atenciosamente,
            CI/CD Pipeline

  auto-merge:
    name: Auto Merge PR to develop
    runs-on: ubuntu-latest
    needs: [sonar-analysis, open-pull-request]
    if: success() && github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/homologacao'
    env:
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git for PAT operations
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
      
      - name: Debug - Verificar PR number recebido
        run: |
          echo "=== DEBUG AUTO-MERGE ==="
          echo "PR number from previous job: '${{ needs.open-pull-request.outputs.pr-number }}'"
          echo "Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "========================="
      
      - name: Fazer merge autom√°tico do PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            try {
              // Obter o n√∫mero do PR do job anterior
              const prNumber = '${{ needs.open-pull-request.outputs.pr-number }}';
              
              if (!prNumber || prNumber === '') {
                core.warning('N√∫mero do PR n√£o encontrado, tentando buscar pela API...');
                
                // Fallback: buscar o PR pela API
                const branch = context.ref.replace('refs/heads/', '');
                console.log(`Buscando PR da branch: ${branch} via API...`);
                
                const { data: pulls } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branch}`,
                  state: 'open',
                });
                
                if (pulls.length === 0) {
                  core.warning('Nenhum PR encontrado para merge autom√°tico');
                  return;
                }
                
                console.log(`\nEncontrados ${pulls.length} PR(s) abertos:`);
                pulls.forEach((pr, index) => {
                  console.log(`${index + 1}. PR #${pr.number}: ${pr.title}`);
                  console.log(`   URL: ${pr.html_url}`);
                  console.log(`   Status: ${pr.state}`);
                  console.log(`   Criado por: ${pr.user.login}`);
                  console.log('---');
                });
                
                const pr = pulls[0];
                core.info(`PR encontrado via API: #${pr.number}`);
                
                // Aguardar mais tempo para o GitHub calcular o status de merge e checks terminarem
                await new Promise(resolve => setTimeout(resolve, 15000));
                
                // Buscar o PR atualizado
                const { data: updatedPr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                });
                
                await attemptMerge(updatedPr);
              } else {
                core.info(`Usando PR #${prNumber} para merge autom√°tico`);
                
                // Aguardar mais tempo para o GitHub calcular o status de merge e checks terminarem
                await new Promise(resolve => setTimeout(resolve, 15000));
                
                // Buscar o PR
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber),
                });
                
                await attemptMerge(pr);
              }
              
              async function attemptMerge(pr) {
                core.info(`Status do PR #${pr.number}: mergeable=${pr.mergeable}, state=${pr.state}, draft=${pr.draft}`);
                
                if (pr.mergeable === true && pr.state === 'open' && !pr.draft) {
                  // Verificar se h√° checks pendentes (ignorando os checks do pr√≥prio workflow)
                  const { data: checks } = await github.rest.checks.listForRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: pr.head.sha,
                  });
                  
                  // Filtrar apenas checks que n√£o s√£o do pr√≥prio workflow de merge
                  const pendingChecks = checks.check_runs.filter(check => 
                    (check.status === 'in_progress' || check.status === 'queued') &&
                    !check.name.includes('Auto Merge PR to develop') &&
                    !check.name.includes('Open Pull Request to develop')
                  );
                  
                  if (pendingChecks.length > 0) {
                    core.warning(`PR #${pr.number} tem checks pendentes: ${pendingChecks.map(c => c.name).join(', ')}`);
                    return;
                  }
                  
                  // Verificar se todos os checks obrigat√≥rios passaram
                  const failedChecks = checks.check_runs.filter(check => 
                    check.status === 'completed' && check.conclusion === 'failure'
                  );
                  
                  if (failedChecks.length > 0) {
                    core.warning(`PR #${pr.number} tem checks falhados: ${failedChecks.map(c => c.name).join(', ')}`);
                    return;
                  }
                  
                  // Fazer o merge
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    merge_method: 'merge',
                    commit_title: `Merge autom√°tico: ${context.ref.replace('refs/heads/', '')} ‚Üí develop`,
                    commit_message: `Merge autom√°tico ap√≥s an√°lise bem-sucedida no SonarCloud\n\n- Branch: ${context.ref.replace('refs/heads/', '')}\n- Autor: ${context.actor}\n- An√°lise: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi`
                  });
                  core.info(`PR #${pr.number} mergeado com sucesso!`);
                } else if (pr.mergeable === false) {
                  core.warning(`PR #${pr.number} n√£o pode ser mergeado (conflitos ou checks pendentes)`);
                } else if (pr.draft) {
                  core.warning(`PR #${pr.number} √© um draft e n√£o pode ser mergeado automaticamente`);
                } else if (pr.state !== 'open') {
                  core.warning(`PR #${pr.number} n√£o est√° aberto (state: ${pr.state})`);
                } else {
                  core.warning(`Status de merge do PR #${pr.number} √© desconhecido (mergeable: ${pr.mergeable})`);
                }
              }
            } catch (error) {
              core.error(`Erro ao fazer merge do PR: ${error.message}`);
              // N√£o falhar o workflow por erro de merge
            }
      
      - name: Send merge success email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Merge autom√°tico realizado para '${{ github.ref_name }}' ‚Üí develop"
          to: dev@email.com
          from: "CI Bot <ci@email.com>"
          body: |
            Ol√°,

            O merge autom√°tico para a branch '${{ github.ref_name }}' foi processado.

            **Branch:** ${{ github.ref_name }}
            **Autor:** ${{ github.actor }}
            **Target:** develop

            Veja o relat√≥rio do SonarCloud para detalhes: https://sonarcloud.io/project/overview?id=Leandro01-oliver_FinanceSportApi

            Atenciosamente,
            CI/CD Pipeline
